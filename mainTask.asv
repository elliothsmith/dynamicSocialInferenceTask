% function mainTask()
% runs the [emotion and semantic decision making] task

%developed from jmp's bartc.m script.
%[EHS::20180531]
% AssertOpenGL;
sca, clear, close all, clc
%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% SET EYE TRACKER %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%
updateFrequencyInHz = 300;
disp('Initializing tetio...');
tetio_init(); %initilize library
% Set to tracker ID to the product ID of the tracker you want to connect to.
trackerId = 'TX300-010105642665';%find in the network settings
% FUNCTION "SEARCH FOR TRACKERS" IF NOTSET
if (strcmp(trackerId, 'NOTSET'))
    warning('tetio_matlab:EyeTracking', 'Variable trackerId has not been set.');
    disp('Browsing for trackers...');
    trackerinfo = tetio_getTrackers();
    for i = 1:size(trackerinfo,2)
        disp(trackerinfo(i).ProductId);
    end
    tetio_cleanUp();
    error('Error: the variable trackerId has not been set. Edit the EyeTrackingSample.m script and replace "NOTSET" with your tracker id (should be in the list above) before running this script again.');
end

tetio_connectTracker(trackerId)

currentFrameRate = tetio_getFrameRate;
fprintf('Frame rate: %d Hz.\n', currentFrameRate);

wanttocalibrate = inputdlg('Want to calibrate: y or n?');
if strcmp(wanttocalibrate, 'y')
    calibration;
end
%% Specifying default variables
%mark_event('start of task',254)
try
    % This line was here, but not sure if needed:: filename='test';
    
    % add current directory to path
    addpath(pwd) %make sure to grab local copies of scripts
    
    %% TODO:: generate movie lists, clip identities, and
    start_path = pwd;
    movie_list = dir('./clips');
    movie_list(1:2) = [];
    nMovies = length(movie_list);
    fid = fopen('./questions.csv');
    q_array = textscan(fid,'%s','Delimiter',',');
    questions = reshape(q_array{:},2,size(q_array{:},1)/2);
    % first row is emotional question and second row is the corresponding
    % semantic quetion.
    % TODO:: assert these have the same lengths.
    
    % setup joystick
    %     setup_joystick
    
    % PTB settings (it tends to complain on PCs)
    warning('off','MATLAB:dispatcher:InexactMatch');
    Screen('Preference', 'SkipSyncTests',2); %disables all testing -- use only if ms timing is not at all an issue
    Screen('Preference','VisualDebugLevel', 0);
    Screen('Preference', 'SuppressAllWarnings', 1);
    Screen('CloseAll')
    HideCursor; % turn off mouse cursor
    % InitializeMatlabOpenGL([],[],1);
    ListenChar(2); %keeps keyboard input from going to Matlab window
    
    % set random number seed
    seed=sum(100*clock);
    RandStream.setDefaultStream(RandStream('mt19937ar','seed',seed));
    
    % setup pars
    setup_pars  % [20180531::EHS:TODO::fix the saving structure. Rename vars, and could be more efficient.]
    
    % [20180604] prebuffering stuff
    benchmark=0;
    async=0;
    
    %which screen do we display to?
    which_screen=2;
    
    % open window
    [window, screenRect] = Screen('OpenWindow',which_screen,[0 0 0],[],32);
    
    % setup geometry
    setup_geometry % [20180531::EHS: cleared]
    
    % bind keys
    bind_keys % [20180531::EHS: cleared]
    
    % setup data file
    setup_data_file % [20180531::EHS: cleared]
    
    % initialize data structure for recording
    global data;
    data=[];
    
    % initialize data io object for national intrusments setup
    global dio
    dio = digitalio('nidaq','Dev1');
    hline = addline(dio, 0:7, 0, 'Out');
    hline2 = addline(dio, 1, 1, 'Out');
    putvalue(dio,[dec2binvec(0,8) 0]); % Set port values to zero.
    ET_time = []; %initiate the ET_time markers log mattrix with trigger value and remote (i.e. eye tracker time stamp)
    SDK_time = []; %initiate the SDK_time markers log mattrix with trigger value and local (i.e. SDK/MATLAB time stamp)
    
    
    % set font parameters
    Screen(window,'TextFont','Helvetica');
    Screen(window,'TextSize',50);
    
    WaitSecs(1); %for some reason, PTB screws up Screen redraw the first time we use pause, so do it here
    trialnum=0;
    
    tetio_startTracking;
    WaitSecs(0.5)
    
    %% main task loop
    %     KbEventFlush
    while continue_running
        
        % set up the current trial. [20180531::EHS:cleared]
        open_trial
        
        % end of task screen.
        if trialnumdp>numtrials
            Screen('FillRect',window)
            DrawFormattedText(window,'Thank you.','center','center',[255 255 255]); %point value in balloon
            Screen('Flip',window);
            WaitSecs(5);
            mark_event('end of task',255)
            break
        end
        
        
        % TODO:: putting the organization of the main task here for reference.
        % 1) fixation cross (500 ms)
        % 2) video clip
        % 3) delay period
        % 4) emotion/sematic question
        % 5) familiarity question
        
        % pick trial type
        which_movie=ceil(nMovies*rand);
        which_question=ceil(2*rand);
        
        trial_start_time=GetSecs;
        data(trialnum).trial_start_time=trial_start_time;
        
        
         % fixation cross?
         mark_event('fixation cross',200)
         DrawFormattedText(window,'+','center','center',[255 255 255])
         Screen(window,'Flip')
         WaitSecs(0.5)
        
        
        %% play video HERE!
        try
            % Open movie file:
            [movie, movie_duration, frame_rate] = Screen('OpenMovie', window,...
                fullfile(start_path,'clips',movie_list(which_movie).name));
            
            % Start playback engine:
            % TODO:: dropped frames, number of frames, and movie duration
            % measured several different ways
            [droppedframes] = Screen('PlayMovie', movie,1);
            [ET_time, SDK_time] = add_ET_marker([movie_list(which_movie).name],ET_time, SDK_time);
            mark_event('movie',which_movie)
            
            %             KbEventFlush
            while (~KbCheck)
                % Wait for next movie frame, retrieve texture handle to it
                tex = Screen('GetMovieImage', window, movie);
                % Valid texture returned? A negative value means end of movie reached:
                if tex<=0
                    % We're done, break out of loop:
                    break;
                end
                % Draw the new texture immediately to screen:
                Screen('DrawTexture', window, tex,[],destrect_ext);
                % Update display:
                Screen('Flip', window);
                % Release texture:
                Screen('Close', tex);
            end
            % Stop playback and close movie
            Screen('PlayMovie', movie, 0);
            Screen('CloseMovie', movie);
            [ET_time, SDK_time] = add_ET_marker([movie_list(which_movie).name],ET_time, SDK_time);
            mark_event('end movie',190)
            
        catch %#ok<CTCH>
            sca
            psychrethrow(psychlasterror);
        end
        
        %         numGazeData = size(leftEye, 2);
        %         LeftEyeAll = vertcat(LeftEyeAll, leftEye(:, 1:numGazeData));
        %         RightEyeAll = vertcat(RightEyeAll, rightEye(:, 1:numGazeData));
        %         TimeStampAll = vertcat(TimeStampAll, timeStamp(:,1));
        
        
        %% delay period
        Screen('Flip', window);
        WaitSecs(post_movie_delay+rand*post_movie_delay_jitter);
        mark_event('end delay',195)
        
        
        %% draw question 1: semantic or emotional content.
        DrawFormattedText(window,questions{which_question,which_movie},'center','center',[255 255 255])
        Screen('Flip', window);
        mark_event('question 1',198)
        question_onset = GetSecs;
        
        keep_waiting=1;
        % trap keyboard input for response
        %         KbEventFlush
        while keep_waiting
            
            % this might work. can verify identities in bind_keys
            handle_input2
            
            run_outcome
            
            %did subject make a response in time?
            if (GetSecs-question_onset)>max_rt
                keep_waiting=0;
                line=sprintf('SUBJECT FAILED TO CHOOSE TARGET WITHIN %d SECONDS',max_rt);
                disp(line);
                result = 'no response';
                mark_event('max rt exceeded',222)
                
                Screen(window,'flip');
                WaitSecs(1);
            end
            
            %             esc_check %did we try to exit?
        end
        
        %save trial data and print result here
        out_line=sprintf('Trial %d: %s',trialnumdp,movie_list(which_movie).name);
        disp(out_line)
        
        close_trial %save variables, increment trial number
        
        esc_check %did we try to exit?
        
        
    end %of keep_waiting response loop
    
    
    %% draw question 2: familiarity.
    %
    %         % trap keyboard input for response
    %         while keep_waiting
    %
    %             %% TODO:: I should probably just write my own input code based of of the MSIT??
    %
    %             % this might work. can verify identities in bind_keys
    %             handle_input2
    %
    %             run_outcome2
    %
    %             %did subject make a response in time?
    %             if (GetSecs-trial_start_time)>max_rt
    %                 keep_waiting=0;
    %                 line=sprintf('SUBJECT FAILED TO CHOOSE TARGET WITHIN %d SECONDS',max_rt);
    %                 disp(line);
    %                 result = 'no response';
    %                 mark_event('max rt exceeded',222)
    %
    %                 % error feedback - shouldn't show up with current params
    %                 Screen(window, 'FillRect', [128 0 0], err_rect);
    %                 Screen(window,'flip');
    %                 WaitSecs(1);
    %             end
    %
    %             esc_check %did we try to exit?
    %
    %         end %of keep_waiting response loop
    
    mark_event('end of task',255)
    Screen('CloseAll') %close screen
    cd(start_path) %return to start directory
    ListenChar(0); %give keyboard input back to Matlab
    
    tetio_stopTracking;
    tetio_disconnectTracker;
    tetio_cleanUp;
catch q
    Screen('CloseAll') %close screen
    if exist('start_path','var')
        cd(start_path) %return to start directory
    end
    ListenChar(0) %keyboard input goes back to matlab window
    keyboard %pause for user input
end




% end % eof
